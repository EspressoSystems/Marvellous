load("instance_generator.sage")

##########################################################
## rescue254 parameters
##########################################################
## use rescue254 to check the correctness of key_injection function

q254 = 21888242871839275222246405745257275088696311157297823662689037894645226208583
rescue254 = Rescue(128, q254, 4, 5)

##########################################################
## print parameters
##########################################################
import sys
def convert_bytes(input):
	res = []
	for v in input:
		res.append(int(v))

	res_str = "["

	for v in res:
		res_str +="0x%02X," % v

	res_str += "],"
	res_str = res_str.replace(",]", "]")

	return res_str
print("==========================\n")

for v in rescue254.constants_matrix:
    for e in v:
        print(convert_bytes(int.to_bytes(int(e), 32, 'little')))

# for e in init_vec_377:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")
#
#
# for e in key_injection_377:
#     print("[")
#     for f in e:
#         print(convert_bytes(int.to_bytes(int(f), 32, 'little')))
#     print("],")
# print("==========================\n")
#
# for e in permutation_round_key:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")
#

print("==========================\n")
print("init vector")
for e in rescue254.initial_constant:
	print(convert_bytes(int.to_bytes(int(ZZ(e[0])), 32, 'little')))


def key_injection(init_vec, key_sched_matrix, key_sched_vec, q):
    key_injection = []
    k = (init_vec * key_sched_matrix + key_sched_vec) % q
    key_injection.append(k)
    for i in range(1, 24):
        k = (key_injection[i-1] * key_sched_matrix + key_sched_vec) % q
        key_injection.append(k)
    return key_injection


init_vec_254 = vector([ZZ(e[0]) for e in rescue254.initial_constant])
key_sched_vec_254 = vector([ZZ(e[0]) for e in rescue254.constants_constant])


key_sched_matrix_254 = matrix(ZZ, 4, 4)
for i in range(4):
	for j in range(4):
		key_sched_matrix_254[i,j] = ZZ(rescue254.constants_matrix[i][j])
key_sched_matrix_254 = key_sched_matrix_254.transpose()

key_injection_254 = key_injection(init_vec_254, key_sched_matrix_254, key_sched_vec_254, q254)

print("==========================\n")
print("key injection")
for e in key_injection_254:
    print("[")
    for f in e:
        print(convert_bytes(int.to_bytes(int(f), 32, 'little')))
    print("],")
print("==========================\n")

permutation_round_key = []
permutation_round_key.append(0x204EF5195A249AF9F0ECAFA3E5D184FD2820A4F9FA8E7CB8273563E8F4ECE853)
permutation_round_key.append(0xD525FBB687D48648B6A0FFBF1C9C6A5C135EB6B6140A4532C4BD159BA8E4E3)
permutation_round_key.append(0x10B1159C4FDEAD8C4E6BA55D1BC831B3EBE63CACE3E16527BE3B61FB72EA9928)
permutation_round_key.append(0x823FA86ED409E6816795278DAC568C2E55387E04418243313BF66DC721B7ACC)
permutation_round_key.append(0x2F95A2D81F8B6286BA2F71E7E5CFEA78337B390CB0575D7AB5381E025A09F35D)
permutation_round_key.append(0x1FF0087C280B120759B94C5CAC308DD5990E2A861E0A760AA53507D530A9C382)
permutation_round_key.append(0x14328570F78244F66CA0A9B4104B27B3636D0384342B8923A066B8FEAF72DBD4)
permutation_round_key.append(0xE13C3803E8723471D8AE0C346F619067C41DDB77BD6E9370C39B7428E1E609E)
permutation_round_key.append(0x119683B0A9069592B670685E597C1624BBF9778D0D2C02070AF0A14B96A1918C)
permutation_round_key.append(0xC35E1BDBE2DE9CEBF5574D13FD2B32DC9DA9EE4875212CDB61126C6D4C9EE89)
permutation_round_key.append(0x2DC4498E24C20197F01BF6F06E78D8287D8F9C6570296F690AFB93D0D77450CC)
permutation_round_key.append(0x10265698B4B7D7075AF1622BFB42DEA5BFA2772F2A5AAE24D302950B0DE361AC)
permutation_round_key.append(0x290AC4B054EB973C0D448F7F5A1FB688DEBE654314B00FCAC4CD5381C23739DB)
permutation_round_key.append(0x1EBA6983C2428D04D7CEE1C0780605CB96FE0D8C9632AE51897EBF166AD87BD0)
permutation_round_key.append(0x246F24E7F3BAE4BA79927B038471184823A0FF00E4D62C3C9E74BB8E9BC70011)
permutation_round_key.append(0xBCD396E205340DC7A11B0EA6453F99E7A64CAC18269C89756E44868E16B930C)
permutation_round_key.append(0xB960935C2012EAABBD3B5308019EA653CE85FE58134A0AC142736B9BA0602B7)
permutation_round_key.append(0x288083E878D3F43967A965747196AE523DC96DA5E30526EB6E052B4820BAA96E)
permutation_round_key.append(0x112A4F5F7F5EBE7CA8F087B5E854AD39C5144CD7D207AAFA6AA88A01F1342644)
permutation_round_key.append(0x1DE7562D11F195A6B4764D93A42D616E3488D2E0B65A1FF19E01C76D210EDE8C)
permutation_round_key.append(0x2CA74619AFEF02DCC51224EF80F4D6C027CA1C15B2E61E900B6B56A429728BE)
permutation_round_key.append(0x13CD998773D192C654CB6B6ECE55E77C8FD49047B9F8E3BB52DB501FE52E6F81)
permutation_round_key.append(0x1669F8B9DC197F20A490E5DB4114BD8AE97ACD0F028D3AD9C9BC59864E8B32EA)
permutation_round_key.append(0x2214DBA3CA05F745DF8C338E5BF5A05C85253463BB1976EFFA9C6A5BD7C89109)
permutation_round_key.append(0x28B3CB8C0CA9A27B300D72435FCE839D8BFD758B746664F31E2A6933E4DE23D6)
permutation_round_key.append(0x6031A2027A4441E97CB669BE7F96D3D1D5B866B813707349CCCC41519DDED1B)
permutation_round_key.append(0x2E5F6E3B6D7A0AEF13FE503734310CEC7C1F757641B4D149CE8086B3B2B9048D)
permutation_round_key.append(0xD39C3C3A32B1B4E7DE0B3CF03DBAACCE6B431CF9F8F7A96E5E8E663562E433C)
permutation_round_key.append(0x3EDF5844175BC8C364EC2A1BE952C04920744CF9882E868A7492AC50690CF6B)
permutation_round_key.append(0x22AA51240845E11FA0E7E32C630997D43F5BD5B763B3F46E346AFD412BA41F44)
permutation_round_key.append(0x1BBF080AF65F408EAFB82713FF235D34A5AFAFAA5FF267778D458A0962F3F43B)
permutation_round_key.append(0x47D6183D9AAE43ED205D877BF1FC6747019359A72BCF6B0D29094385968B79D)
permutation_round_key.append(0x1D960E8F660ED96C95EC5FADAA130567619B75D7DA6B95715AAFD8D59AFD47BD)
permutation_round_key.append(0x14A4C25E6A18A25DC4602CB20C0FEE71987E2A117E6AB3AF9017386D48C2FB8A)
permutation_round_key.append(0x610E8A3E55D17CBB4D20A9CB826BD846D72F01A87F3EBA8A3483301EF9AB333)
permutation_round_key.append(0x2EE56463B02F862A21FE443C6242C56548D8D9F564D031902010FB4BC54A1482)
permutation_round_key.append(0x1A9DE09463378012D3BA43E4CE9B6AEF98E633EC93AC2B01A998E615B417F409)
permutation_round_key.append(0x304E0124AFEFA6F928B6C184E3771A6E2D4E30C8D222DAEF7D62B132548B5C2C)
permutation_round_key.append(0x21D94866DF6E5F182A7A5267726B8884DCE46B382D862FD12F09F8A288CAD3A0)
permutation_round_key.append(0x149D041AF0102CDE355EA5BBAA23CDC5A540CB43D2BE39B562F046A4F2164260)
permutation_round_key.append(0x3FD254280E82B6EF198B10BF55AC04F771E22AC77B6529E49246F4EC265251E)
permutation_round_key.append(0x18268BD61029B098AEE7C2564FB96B2D371EDE70733B56F34B76C14284EF0616)
permutation_round_key.append(0x28045CC8A9DB00E6489C0BBB1B33AEB8E3DE5F80088DB46F91D4ADE356763133)
permutation_round_key.append(0x22C69BB0E11EAB6FBE18CA6A1F0E3612E0D14457D36200999238863C37E6B8D5)
permutation_round_key.append(0x2CD39DA6D59F83AB003DC8A8C376D2E4746C4E208282095F2A65FC987E87FCD1)
permutation_round_key.append(0x29B397845DA5B9A8FBA065B99B67CC8D4A7C7CDB75F599499E0F5A9D68D35DBA)
permutation_round_key.append(0xA6704A80B3D524ADD5E674DFB20B3D035BA9DD34A0A7944BEAA6311CEBD6F5E)
permutation_round_key.append(0x18A49099801BE1B4F57BC3D5299DFC01BB163D4554CB1A4B1DF8F88223B48B96)
permutation_round_key.append(0xADB3FC57390DD6078DC85AF2046F400442AE5FB95C88B03D14C7392D201FB9D)
permutation_round_key.append(0x17CDBAD7C4D8C47BF855781792E4258D8CE98D12DB70D5B00F0ABD608854AFBE)
permutation_round_key.append(0x157D3B3630405B5AB1485452CAA9BB9A38C1375B53DEC1FFDF9E49C76B4068A3)
permutation_round_key.append(0x5B5BBCF02E97638B2B8FBA995D7D9FFB434117A400CD5EEDBCC6A910729423D)
permutation_round_key.append(0x177F5E93F1635E3044B0F05124C3663DB4C38244DB1C3CE8C9BD481D90313607)
permutation_round_key.append(0x21D26DE551350D4540B9B381784CAAB96E5EBFCB9F059F47128409D7ED5FCD14)
permutation_round_key.append(0x2C4880850499C197A53DF4BBCCB82D4AB8DD5397C936CBDDD286105B82ACD391)
permutation_round_key.append(0xD17D89EBAFD6932FAFE8135B01D21EE8B72FE5ECC46BBB2A9361851D7FE2F0E)
permutation_round_key.append(0x2A4B301572AC6C3C39256C1F23040470AB8A14F081330B01F3E1E7ECB489DBBC)
permutation_round_key.append(0xD798BA3038E0207C3A6C7C83222C8EE7A85DAD7434B32F1F7187661E1F9FBEE)
permutation_round_key.append(0xCAA4EBD3D8256124C3BA0FD27B0BE1FC8C2FF2254E65873E6AB873EE7F31C36)
permutation_round_key.append(0x2C32E82B6D327066C6EEEE23743DC80EC70AC9E99BA6EBD4B59E4A0708F9FF3F)
permutation_round_key.append(0x1E5042F587C221911310ED0C11DED52CABF0B619AED970F695DE558328F4C8CA)
permutation_round_key.append(0x215BE6217554AF7B13B098BEC34C8FE1B9B821FA96A59F4AE4131996AC578D45)
permutation_round_key.append(0x1D991CB0F19798206572AAB11B726AFEA1722AF8725A90BF37B4929D628175A9)
permutation_round_key.append(0x14625000E4EA45A1DDAC8D5FDF8A75EFA721EA174E1F4537F95BA0AC9D211D02)
permutation_round_key.append(0x2096152EBBBBF0DADB63D751C014B1710013A09BF3D7881FDCAE0988A94F97C6)
permutation_round_key.append(0x564FA4E948D0E5B2120B89FFA1EDD1BE1AD03A91AF414C50487FB2E1557E3ED)
permutation_round_key.append(0x2D741023096DBC7AC97F18AF7A7DA3489FF0C98B6A9B99AD553DA2F6FDA95C3C)
permutation_round_key.append(0x7D18BC332D7FB1073C6E7B81BFA3F2951E6F758F7AAB23C523FF84395D3D949)
permutation_round_key.append(0xEE44ACBA929E3E1DD7BB5599C0CBBDF3D49607B94F7CFC7EED94AE079F0DF18)
permutation_round_key.append(0x23464B92293750761BC0F535E447F31F238C68CE9100E533E8A31481DDA133E8)
permutation_round_key.append(0x1E9BF73E79DA1CBF0ADE925C3C993540A25872DA75D3DF83A63254C19608A28A)
permutation_round_key.append(0xC385728A2B2A2694A9E0FA053D85BAF549F9B0589A8CCF4636D96A5F7782139)
permutation_round_key.append(0xEE534D611417AE41B0A9639F272711FAA96DD0DF441A35A8F6EDAC2A6950626)
permutation_round_key.append(0x2F53E14AAE4EE5AC44D4C0C4CC9205A935E99787EA5CE0EF305D8FC6F1E366D8)
permutation_round_key.append(0x3FA3C98E62B5D8FA3C20DCCF20562043EE12B6B0A2C332B30C189B247526099)
permutation_round_key.append(0x4D251CE6DCD30FB29FDD15A1D512A9D78324549BDCECA12E4C41C47786E7FCC)
permutation_round_key.append(0x65A24253FA112F509CA23836BD9372EE504E0DCD74D530FF51C75005C0383AF)
permutation_round_key.append(0x42C28BB94D8006C7F4BCAF701AC92E2FE9A640AFFDE1AC423915258FA32FAA9)
permutation_round_key.append(0x7958E17F48D7101391FAB7BBBBA6589057276CD6D5294E1FD28ED7A9AF2C5A4)
permutation_round_key.append(0x18EF4450A30E6207B830B8F341994FF49D8EFF7CC89F11348A0F22EBFAFC8E5C)
permutation_round_key.append(0x11A779F18023283E13F7EB579E7BEA29526A621BDB47DFF81061108BE7F5F753)
permutation_round_key.append(0x21AA7EF943DA3C007FFF7E1DECDE06D7A9A47EE6E2CF5F5091AA035CC96D155C)
permutation_round_key.append(0x287D203F9EFA08625066DF65BDD7BF32B838E3F341C01917F142AA47ACE397C8)
permutation_round_key.append(0x1DDA0243DAB7D197CC54DD5432C50925AD48E39E9CB247C2A0832D0003883BCA)
permutation_round_key.append(0x63865E8BB15949658EB1773E0A72CE98E4D934224566CCCB7B3C527367A1D37)
permutation_round_key.append(0x369F709BA588A18359FC16E95334606F204421946B849F2F95D06AD0C0D92A2)
permutation_round_key.append(0x306C20AB645F409553B6CE27FBB580287823AF897825C44B03F7766534FC9BC)
permutation_round_key.append(0x8975EFC3CE32C8169C39A75444E9B00BE16BE65707F11797D8BC2C2A2197E2C)
permutation_round_key.append(0x7A311B6CC1784B5F776B2B82B3383FDB2B33EDF5E30ED68D402FFA91EF1F54A)
permutation_round_key.append(0x1908F69999E42A11216E50541CFD6263B77627518EF9444225F42FFBC95F932D)
permutation_round_key.append(0x2A7E86ACB89723C60748CED8FF31609051200C61A783D15956F3DE567B6FB31C)
permutation_round_key.append(0x2228F2CBEC74B6819ADDEB61F01BFDD8DD9996DBA0834ECAA5711007E85821A9)
permutation_round_key.append(0xD0734C4DFC9AF64B396FB916D7E90C4055C867CF22ADF70B6063C8B4E1E4816)
permutation_round_key.append(0x2C7921F0F539B8DF2BB98E51F2AECCB01C78E01EEF002B7CC8296DD83E4AD829)
permutation_round_key.append(0x2A28441EBAEF20CEB026E52C16222F24BAF4F22ABA54CC693EA6AF6BCA58DE96)
permutation_round_key.append(0x2E4EB090658A6755138DD01A0038F622DAF65B42EB1C50471590434EB6969D5B)
permutation_round_key.append(0x28C0A152101AE72DB3DB8C0EEA398235E7E2DB82A7220FBFF01F22F3474283E7)
permutation_round_key.append(0x2ED2D23A0ED1C6F365C4F891A4356B027EDA607A6985F4B618F41CB6FB210E2A)
permutation_round_key.append(0x2DB7525E6C6E0917FF4701A181B7BD78527A22AEA02B47ADDE2BDFCEC349078F)
permutation_round_key.append(0x1152D73E2977430FC806A6C8D2EE9983FFBD5404685B325A79761E8B6CC3908)


print("permutation round key")
a = ZZ(0)
for i in range(len(permutation_round_key)/4):
	print("[")
	for j in range(4):
		print(convert_bytes(int.to_bytes(int(permutation_round_key[4*i+j]), 32, 'little')))
	print("],")
    # a = a + ZZ(1)
    # if a%4 == 0:
	# 	print("],\n[")

print("==========================\n")



# t = [0x2122182A1DD6C6CB089442B10FC81BCF71B1860643DAB4B5D553ED9159BA27B1, 0x21560AEA899FBEFAE13418D802FBFC7F966D802A42669F4C49BD4E4B5809B5A5, 0x023B0BEB06E791767ED2A9FEC343593143B3FC86495EA75FF63CF0418A46984E]
# for e in t:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")
#
#
# t = [0x2122182A1DD6C6CB089442B10FC81BCF71B1860643DAB4B5D553ED9159BA27B1, 0x21560AEA899FBEFAE13418D802FBFC7F966D802A42669F4C49BD4E4B5809B5A5, 0x023B0BEB06E791767ED2A9FEC343593143B3FC86495EA75FF63CF0418A46984E, 0x2937E781F5252072620EA018598C4FD5B8241FC1532E1737E567DAF8AF66CE42]
# for e in t:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")


print("mds")
for e in rescue254.MDS:
    print("[")
    for f in e:
        print(convert_bytes(int.to_bytes(int(f), 32, 'little')))
    print("],")
print("==========================\n")

print("v0")
v0 = rescue254.Sponge([0,0,0,0], 4)
for e in v0:
	print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
