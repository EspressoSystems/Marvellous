load("instance_generator.sage")

##########################################################
## rescue254 parameters
##########################################################
## use rescue254 to check the correctness of key_injection function

q254 = 21888242871839275222246405745257275088696311157297823662689037894645226208583
rescue254 = Rescue(128, q254, 4, 5)

##########################################################
## print parameters
##########################################################
import sys
def convert_bytes(input):
	res = []
	for v in input:
		res.append(int(v))

	res_str = "["

	for v in res:
		res_str +="0x%02X," % v

	res_str += "],"
	res_str = res_str.replace(",]", "]")

	return res_str
print("==========================\n")

for v in rescue254.constants_matrix:
    for e in v:
        print(convert_bytes(int.to_bytes(int(e), 32, 'little')))

# for e in init_vec_377:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")
#
#
# for e in key_injection_377:
#     print("[")
#     for f in e:
#         print(convert_bytes(int.to_bytes(int(f), 32, 'little')))
#     print("],")
# print("==========================\n")
#
# for e in permutation_round_key:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")
#

print("==========================\n")
print("init vector")
for e in rescue254.initial_constant:
	print(convert_bytes(int.to_bytes(int(ZZ(e[0])), 32, 'little')))


def key_injection(init_vec, key_sched_matrix, key_sched_vec, q):
    key_injection = []
    k = (init_vec * key_sched_matrix + key_sched_vec) % q
    key_injection.append(k)
    for i in range(1, 24):
        k = (key_injection[i-1] * key_sched_matrix + key_sched_vec) % q
        key_injection.append(k)
    return key_injection


init_vec_254 = vector([ZZ(e[0]) for e in rescue254.initial_constant])
key_sched_vec_254 = vector([ZZ(e[0]) for e in rescue254.constants_constant])


key_sched_matrix_254 = matrix(ZZ, 4, 4)
for i in range(4):
	for j in range(4):
		key_sched_matrix_254[i,j] = ZZ(rescue254.constants_matrix[i][j])
key_sched_matrix_254 = key_sched_matrix_254.transpose()

key_injection_254 = key_injection(init_vec_254, key_sched_matrix_254, key_sched_vec_254, q254)

print("==========================\n")
print("key injection")
for e in key_injection_254:
    print("[")
    for f in e:
        print(convert_bytes(int.to_bytes(int(f), 32, 'little')))
    print("],")
print("==========================\n")

permutation_round_key = []
permutation_round_key.append(14613516837064033601098425266946467757443473160059438324202885522528091826259)
permutation_round_key.append(376600575581954944138907282479272561597235884521558434184951080537836545251)
permutation_round_key.append(7549886658634274343394883631367643169484909645484867875506884466044920568104)
permutation_round_key.append(3682071510138521345600424597536598175842704818239502275576768037591864539852)
permutation_round_key.append(21523088005644180345243312608043424907972625297103767299041413803660236419933)
permutation_round_key.append(14445800162849277105162125677196566489394805028984088973595733983642415383426)
permutation_round_key.append(9135520302748122608665175474889322316956202597976199978925869379542486014932)
permutation_round_key.append(6367299272392270846199352745005005320110677392769157778815747866117204238494)
permutation_round_key.append(7955254377154815137673751012474202353326195571364795884965052111668191007116)
permutation_round_key.append(5522955085818622055905389038943427380027872702867477976170822418147815583369)
permutation_round_key.append(20700887870610345283711251969215171612362658820232218317576791827992636838092)
permutation_round_key.append(7304743432923398085567200182494783985341607482384118461317776021890126799276)
permutation_round_key.append(18563852758739439053114602252008883625445172425330412675218469274778779204059)
permutation_round_key.append(13898747247124159559993853474310685188040583602390701717736615377729477966800)
permutation_round_key.append(16479637289471925603888343702811392640785443900961969316635383370770622644241)
permutation_round_key.append(5338041351235641289325988068619972983629121182138080846771594446869166265100)
permutation_round_key.append(5240531959158053346304316101792280404630502866752245913476971445196740231863)
permutation_round_key.append(18319580763826012890769146530876293177056286889983434030482246015146184583534)
permutation_round_key.append(7764073815206187077774218728386190399025522915274062374465738338720793503300)
permutation_round_key.append(13525809046151647141361128356057329995841115584493910187383618136842865401484)
permutation_round_key.append(1262332038265789239291617055519357448806427040509091163768212967971263817918)
permutation_round_key.append(8957207390342616201157457473560498071108320165956602062498487868419474354049)
permutation_round_key.append(10138118254496921238106885388670249998852444278926443492085346458422790009578)
permutation_round_key.append(15415489691323415920351949786765359137296007517445125929854808486011352944905)
permutation_round_key.append(18410184398160449380261232252648367251366764682170451425231380070649936356310)
permutation_round_key.append(2719357944991997912453594143021140654953698367189666887965426416408575470875)
permutation_round_key.append(20975002300248445951356714844864736033384139191136136757444100099218788123789)
permutation_round_key.append(5982128429185691805946439820796002662035840309317497706891075866215056294716)
permutation_round_key.append(1777375793563932954479634339360660026176915087315638800771964380384834146155)
permutation_round_key.append(15679560865726797640369756197082215924447802174602917760952032499188596219716)
permutation_round_key.append(12549970210637113112440210977971223821143136496136005711647027855940826428475)
permutation_round_key.append(2030780301502083688079607427418325463037830766980374785970432054501170526109)
permutation_round_key.append(13382200159100673786000568357761197137684855301175076941555556573630999381949)
permutation_round_key.append(9337361374488483735812785120851691249526906742131794418365362466414309604234)
permutation_round_key.append(2743752268314625647183938281969770821021633026034766356455805714522103788339)
permutation_round_key.append(21211691874888416587323873807165872903603538884222669263882966541250274661506)
permutation_round_key.append(12039079044037668631133450931185707052692331505631048598516501965326184346633)
permutation_round_key.append(21848838693882165682623307460800228914683933588003061887700545826001183792172)
permutation_round_key.append(15310229515486274414018012368537750636767392188573670787886960079311947355040)
permutation_round_key.append(9323680294061138734165009232928577086867034794381005676540547613793700954720)
permutation_round_key.append(1804208010685524075947879913400176569318576205705221486297715103571261072670)
permutation_round_key.append(10923613668332909452000691049865044068652292354816518884258120306240003180054)
permutation_round_key.append(18100221702130877346260983333891169685090629383898582717092589183309031289139)
permutation_round_key.append(15729547109999425655280468487585909651521836829894760441268232519062865230037)
permutation_round_key.append(20275658140356691561319483092882139116614496125312778869141864156152921062609)
permutation_round_key.append(18862138148782796689744519042297877757666401682413335592265625326355517496762)
permutation_round_key.append(4705145870944926104949337883846163571540827366731932897307281625407524007774)
permutation_round_key.append(11146269274459269452539465353480261167917678291183881978769785645073542974358)
permutation_round_key.append(4910508126318978730927332684640483294667342086662837665693420057501961943965)
permutation_round_key.append(10766688707634114353564920944249405673362917113788025798897116915537932496830)
permutation_round_key.append(9719834367298937740091750276089810174362494097696644039876263148126623262883)
permutation_round_key.append(2582659769223694639522144969066220014373739181566628392504613248751117091389)
permutation_round_key.append(10628237847331880011660931150122807781896287552852582158822558739247081272839)
permutation_round_key.append(15298120359582958359920828414321560886713975914026036483773752590917596859668)
permutation_round_key.append(20029865336017561490284536147144496553726013777536061877662929583658853258129)
permutation_round_key.append(5922199570647179522119099234206072047395298508895012602197574392600455950094)
permutation_round_key.append(19129985032415624967140030116669875043957914948201686656275424712569087712188)
permutation_round_key.append(6094819264008513736057268558192235325800742062580131111459650618047258557422)
permutation_round_key.append(5728661622134158753379182583592072696727276455913616138310288832314251353142)
permutation_round_key.append(19991710066832591624224037242220831149368461690841904303429436203389064707903)
permutation_round_key.append(13711195357423104312571119697913385738866643967420443536078444873692015282378)
permutation_round_key.append(15088695389837001343602988767229958675305972678986730749791202713041571908933)
permutation_round_key.append(13387598229116766166649933307034840903983137635857776820522938101059654088105)
permutation_round_key.append(9219960147828929088676834981569563029135129659594690773713324573681487256834)
permutation_round_key.append(14739184410982824287146022454578701916632827902974498733662295638052185282502)
permutation_round_key.append(2439976504500954325274918627386353694889986226731411005791022433241574925293)
permutation_round_key.append(20559143818293915557627670519069231110955369964514378622344501397568547806268)
permutation_round_key.append(3536425581907814924342845746475463439549439647097346181012544340393039485257)
permutation_round_key.append(6735737230849046904085075871922420694386499100451759672075453478048808099608)
permutation_round_key.append(15955150566417592134910720556617060383996790684183006379449318334858799428584)
permutation_round_key.append(13844953168235505338607913024760312668487479274745033884189765503200289923722)
permutation_round_key.append(5527299166090900836007177239065688879708644198966289025645229326801449787705)
permutation_round_key.append(6737352520055845213960565163124970229985518771533162773897310114859063772710)
permutation_round_key.append(21406907096111002558259247483199785424375086779412345404374855830357391140568)
permutation_round_key.append(1799068538876762692878646924776323721041919245747527443436285509378191286425)
permutation_round_key.append(2180853884703080341448102194304405614808348042215175752159360961241282412492)
permutation_round_key.append(2873142794417100461338505328041116747131524534834547198380982868104416822191)
permutation_round_key.append(1887273792222289937806187353149934861072765910971680721814694071154311887529)
permutation_round_key.append(3430430846549246382694009833093807147850732404653541714033399439402105750948)
permutation_round_key.append(11278256307199562642428745822688140600611215925729778803864349958412909186652)
permutation_round_key.append(7985223507883063392552974526184088403880546251856365290742146064310770988883)
permutation_round_key.append(15227564344472231843483878562857032210950517403645105901622657416913966929244)
permutation_round_key.append(18313592397529890495758766121414852571923648599462152580906555390325019613128)
permutation_round_key.append(13502260901879231547042718517758644068067477029793130214292460131302469286858)
permutation_round_key.append(2813523877918116690109784801539706218249374256094771589073578610530300075319)
permutation_round_key.append(1544162481163216053365583668109700603937276111584267283473901075951392756386)
permutation_round_key.append(1368878855724827700736431901748475422593415738532174061486083708605262973372)
permutation_round_key.append(3885952259923016977065726820179054665857402797691934103652805273704220687916)
permutation_round_key.append(3454308269533312634971486346007494060212626129831577799061326256149047145802)
permutation_round_key.append(11323657961779679320694238214011302315167120907869805450620948821933559878445)
permutation_round_key.append(19220691861220198372594374826226779885487734795731347461825897811690124194588)
permutation_round_key.append(15450986454809003068102105586288631922488220602081996627831055189423462818217)
permutation_round_key.append(5892799159563101102367734123765303957933622221151790225414180529402604832790)
permutation_round_key.append(20115788086343806773268676345597958657303043250205889180814369222185414481961)
permutation_round_key.append(19068283670324763324790871459095549891569069529985576085121929720625259667094)
permutation_round_key.append(20945423706165800466202652793115410663153389956395650280562325385210450320731)
permutation_round_key.append(18432861973341629249222600095506568734368852311043157049927351919269673862119)
permutation_round_key.append(21178879850404116685561570706920044559884717242015150820894747502460006370858)
permutation_round_key.append(20677979687955848836109671440097205416770850313341433876276973473776240494479)
permutation_round_key.append(489730339785967183426723224734602089981472522143119266984612540547985062152)



print("permutation round key")
a = ZZ(0)
for i in range(len(permutation_round_key)/4):
	print("[")
	for j in range(4):
		print(convert_bytes(int.to_bytes(int(permutation_round_key[4*i+j]), 32, 'little')))
	print("],")
    # a = a + ZZ(1)
    # if a%4 == 0:
	# 	print("],\n[")

print("==========================\n")



# t = [0x2122182A1DD6C6CB089442B10FC81BCF71B1860643DAB4B5D553ED9159BA27B1, 0x21560AEA899FBEFAE13418D802FBFC7F966D802A42669F4C49BD4E4B5809B5A5, 0x023B0BEB06E791767ED2A9FEC343593143B3FC86495EA75FF63CF0418A46984E]
# for e in t:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")
#
#
# t = [0x2122182A1DD6C6CB089442B10FC81BCF71B1860643DAB4B5D553ED9159BA27B1, 0x21560AEA899FBEFAE13418D802FBFC7F966D802A42669F4C49BD4E4B5809B5A5, 0x023B0BEB06E791767ED2A9FEC343593143B3FC86495EA75FF63CF0418A46984E, 0x2937E781F5252072620EA018598C4FD5B8241FC1532E1737E567DAF8AF66CE42]
# for e in t:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")


print("mds")
for e in rescue254.MDS:
    print("[")
    for f in e:
        print(convert_bytes(int.to_bytes(int(f), 32, 'little')))
    print("],")
print("==========================\n")

print("v0")
v0 = rescue254.Sponge([0,0,0,0], 4)
for e in v0:
	print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
