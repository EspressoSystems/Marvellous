load("instance_generator.sage")

##########################################################
## rescue254 parameters
##########################################################
## use rescue254 to check the correctness of key_injection function

q254 = 21888242871839275222246405745257275088696311157297823662689037894645226208583
rescue254 = Rescue(128, q254, 4, 5)

##########################################################
## print parameters
##########################################################
import sys
def convert_bytes(input):
	res = []
	for v in input:
		res.append(int(v))

	res_str = "&["

	for v in res:
		res_str +="0x%02X," % v

	res_str += "],"
	res_str = res_str.replace(",]", "]")

	return res_str
print("==========================\n")

for v in rescue254.constants_matrix:
    for e in v:
        print(convert_bytes(int.to_bytes(int(e), 32, 'little')))

# for e in init_vec_377:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")
#
#
# for e in key_injection_377:
#     print("[")
#     for f in e:
#         print(convert_bytes(int.to_bytes(int(f), 32, 'little')))
#     print("],")
# print("==========================\n")
#
# for e in permutation_round_key:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")
#

print("==========================\n")
print("init vector")
for e in rescue254.initial_constant:
	print(convert_bytes(int.to_bytes(int(ZZ(e[0])), 32, 'little')))


def key_injection(init_vec, key_sched_matrix, key_sched_vec, q):
    key_injection = []
    k = (init_vec * key_sched_matrix + key_sched_vec) % q
    key_injection.append(k)
    for i in range(1, 24):
        k = (key_injection[i-1] * key_sched_matrix + key_sched_vec) % q
        key_injection.append(k)
    return key_injection


init_vec_254 = vector([ZZ(e[0]) for e in rescue254.initial_constant])
key_sched_vec_254 = vector([ZZ(e[0]) for e in rescue254.constants_constant])


key_sched_matrix_254 = matrix(ZZ, 4, 4)
for i in range(4):
	for j in range(4):
		key_sched_matrix_254[i,j] = ZZ(rescue254.constants_matrix[i][j])
key_sched_matrix_254 = key_sched_matrix_254.transpose()

key_injection_254 = key_injection(init_vec_254, key_sched_matrix_254, key_sched_vec_254, q254)

print("==========================\n")
print("key injection")
for e in key_injection_254:
    print("[")
    for f in e:
        print(convert_bytes(int.to_bytes(int(f), 32, 'little')))
    print("],")
print("==========================\n")

permutation_round_key = []
permutation_round_key.append(14613516837064033601098425266946467757443473160059438324202885522528091826259)
permutation_round_key.append(376600575581954944138907282479272561597235884521558434184951080537836545251)
permutation_round_key.append(7549886658634274343394883631367643169484909645484867875506884466044920568104)
permutation_round_key.append(3682071510138521345600424597536598175842704818239502275576768037591864539852)
permutation_round_key.append(21523088005644180345243312608043424907972625297103767299041413803660236419933)
permutation_round_key.append(14445800162849277105162125677196566489394805028984088973595733983642415383426)
permutation_round_key.append(9135520302748122608665175474889322316956202597976199978925869379542486014932)
permutation_round_key.append(3678299619662243081632625265012556605728516631240289963178588427510160927656)
permutation_round_key.append(11345363935105214660516753977143792063825708338850560623944880103947301283236)
permutation_round_key.append(8612591707231126398329470712630128928842971148042423043892016152752332649202)
permutation_round_key.append(7307042970357539184240264583948703712163460293343474922531545891718203109679)
permutation_round_key.append(8833714527869815454522650396184912870751003190322620667116584042781502735218)
permutation_round_key.append(3771538410567107988991862941273792282704136914372632585535732364637583331665)
permutation_round_key.append(2859526352661268302739548995132343810137262135732162500799262591316706131485)
permutation_round_key.append(21673943587858778553370288087225118047390415282162106878321160687739369492552)
permutation_round_key.append(20854143764610597749788127598806195157012136780223050602925748146354182033788)
permutation_round_key.append(5123214653549493504010717833693629512999579167583674919445646034014074826708)
permutation_round_key.append(13377261337825548724741283268085135112275654622325306581097537052043714882764)
permutation_round_key.append(7008625749377505693074036953708160033795882944426882552039392560095722804021)
permutation_round_key.append(10606505129189555214251904095583259670020501700014669809837369639136046972703)
permutation_round_key.append(7282380867707288103363280746034882685353557599123832653851706160954711443385)
permutation_round_key.append(496365845795958902027037779066506306988994231242595198868918312153608829889)
permutation_round_key.append(5710866091016187646243314211396489348052452838829277621217271141017347066037)
permutation_round_key.append(5777628560287540897838849295445830641264036040174538683589891226163759782580)
permutation_round_key.append(16609151511377122139562488297318803249899362639457101706007738410963426613294)
permutation_round_key.append(12863572964158980514557848327971940575762056585219519160390299702753907227714)
permutation_round_key.append(20820518202563113179122572064706401826606442373939817617234692459813588236754)
permutation_round_key.append(16000785712667696289011784305964195896427637813863446292337313198105256623234)
permutation_round_key.append(17030237480595054220928891206881314147613605634760789571919576602605523674158)
permutation_round_key.append(5592679349072215031107659696652795390971226532605409680847326274419272535269)
permutation_round_key.append(12875307068863520026190726807230606719165178125353120813205187307487929723431)
permutation_round_key.append(21082068564080499915360396954771372025525615472420409860669895293844035182394)
permutation_round_key.append(20519575759220287725206961304374565472666613964716610352525354012278837762089)
permutation_round_key.append(19916187101166481635953123115223812771835494818009158125496519996871440875497)
permutation_round_key.append(13380903337482848720349788762476733639338358885474918514195986572910279557979)
permutation_round_key.append(20401509182397169923170818822213992399078770605368423387869372299726088611371)
permutation_round_key.append(16804727225459965522435882364181702606212720468213099642913275969072490685029)
permutation_round_key.append(16743876191198059594044235282742309492806440220748872521625348748991850540916)
permutation_round_key.append(3267458543477066278341878387584832970632264740862674699694737089582332846874)
permutation_round_key.append(18502269211042712028907625776649107957762762394879328977528825209371370710462)
permutation_round_key.append(11490182134601454172465826798103415719682271059459970197722302753126886497808)
permutation_round_key.append(19082650409362248973222161034311882122310708367044433093098579795676574647037)
permutation_round_key.append(21619544799031518383129303881269588753564579951072709557234772744261617677907)
permutation_round_key.append(21563295495701444928855276136663347046686960127918242533891224617913902617814)
permutation_round_key.append(5336675321594988145788416857178554435907741031723154191331524631664407418465)
permutation_round_key.append(7669067127845203866265963961390030887730131816897631179983884868016956528152)
permutation_round_key.append(3028674968667784007528937847885290644688781363729030495873237287419232448176)
permutation_round_key.append(13991514012794889628636937535692892242280828538674558166605699909249008351614)
permutation_round_key.append(13234242804549642410914188624185572206989529730347209832253318768110136713004)
permutation_round_key.append(12667071713098819456071699430795539671149253700806889020047861177789656170744)
permutation_round_key.append(751301506565610888089599987687435569351138688397743432992922390922067311504)
permutation_round_key.append(15658441221986322247492735834674897741029845348572218347638062475326468278405)
permutation_round_key.append(1121704600106641309814715788391389710223507933407294986683770317975828923570)
permutation_round_key.append(11758318212635683647203457607078868183087240602776466805626903951582257407748)
permutation_round_key.append(1882480927708669817549793701269593226110052260413802397236637832316908164185)
permutation_round_key.append(4758117245775636820990803475551645616922370430894387983400049025609056951726)
permutation_round_key.append(4710658113659748431402804680678248062034651269368769140685199932048689854791)
permutation_round_key.append(12675473138379687976125755426159182270177717080851298176961855745833926403905)
permutation_round_key.append(14654896262759229547226593645013374816561348723461493529266642170074106828766)
permutation_round_key.append(2278762109072262015427241544611445084875781434436652463995587298243521278016)
permutation_round_key.append(18182782673459870309883162774802072637700612498303432853780667045245369126365)
permutation_round_key.append(14110669545602317112121478884903462440627137964715225384430234480318223801821)
permutation_round_key.append(16196107286514619728645101460270075682390209034751873289851669316812101811849)
permutation_round_key.append(19804251885115167742512995595014094363433248757100565378429735752619795042672)
permutation_round_key.append(18505625429052144294393397926906572662266417964188005919398766837700262214028)
permutation_round_key.append(13673301753854666306251698700124479251524288462459766980875328275839503174632)
permutation_round_key.append(19219980501524391366242760939084313522092191106695583813662841375241371681871)
permutation_round_key.append(12389780807489882448912902780223409027429034268609439915585406138182487059926)
permutation_round_key.append(5005798247832371617060032495227251311323564539834700733764296129142366469032)
permutation_round_key.append(7637566146860254899459764643063361404767371230812133096678285377830211533328)
permutation_round_key.append(16715115622737244314223190283010530994437218897887449741960424425966745117900)
permutation_round_key.append(8649536200211295331446257264636935213300071280685996889060483139681933419932)
permutation_round_key.append(6542839486232597143562463299404061965975864961524726730023241609052040815147)
permutation_round_key.append(13497090255372733635555522312942689202804015569308162755245887803603643070417)
permutation_round_key.append(6862410129447803511843962111534462623401847578043490727808010934110864070904)
permutation_round_key.append(3759097453415265314510641279055769104980517725303243923247563600461099900112)
permutation_round_key.append(3827758166521588868286062555779893335272308440204975465357825281338456049077)
permutation_round_key.append(21726396549766678075233544949836273499595153420305627870398728541214927700441)
permutation_round_key.append(9136747913487701269776245975361353471860375050348353059776595700733718811122)
permutation_round_key.append(17581662155141638612743942922256607818442299856383192832413459494224927640181)
permutation_round_key.append(1316624385162091340107578042160481063823478896151437774433976162575370011737)
permutation_round_key.append(6831565465156452855012685052320345724576205292875209028358136490603214427166)
permutation_round_key.append(8578073268612171705502491487981045105926662393894297819326905618871022661547)
permutation_round_key.append(306294676436108222430337426534162654379449540593953101219660184026676630398)
permutation_round_key.append(18783374811956784940564472321061267894620816643226560981935413089513147627996)
permutation_round_key.append(4491083294808639082200032797969524615338383789325986350167203629736527628801)
permutation_round_key.append(12792958372075634724446061541262155339874271894434095894655377894901912764502)
permutation_round_key.append(19353114204804720133864658716011353006206647981284193489030617287486783873197)
permutation_round_key.append(13720924615160112177312466299730389082588726403632934450527692127317940874366)
permutation_round_key.append(5665956987839412290548858811915004492750299284673116293074372612685070506899)
permutation_round_key.append(2157433023874314439060720894922998944530347446728483174573745231186268488666)
permutation_round_key.append(13637654584592584472257734070907979904257610124917756537012623455056497141642)
permutation_round_key.append(5056184547457421068345869146417695433932547185532082207592447742042982130277)
permutation_round_key.append(21750797172974930658582387011389285075555801913971585397181092431478743471824)
permutation_round_key.append(16053425142774085562105211662808964608146691250837310625001896748617660747383)
permutation_round_key.append(4915606381039906150760148108573520968029157579104498276070050497906529170567)
permutation_round_key.append(8903180658112463203913973533908009858541830583990624837090213049087415959172)
permutation_round_key.append(12723915845662291793231254712594664234039497396700185473207339975601602958484)
permutation_round_key.append(131418660585663166681599453266155041779880586431806608578002664872565343016)
permutation_round_key.append(3436015366939130011970154863104673991159285709788605069140835587709688668876)


print("permutation round key")
a = ZZ(0)
for i in range(len(permutation_round_key)/4):
	print("[")
	for j in range(4):
		print(convert_bytes(int.to_bytes(int(permutation_round_key[4*i+j]), 32, 'little')))
	print("],")
    # a = a + ZZ(1)
    # if a%4 == 0:
	# 	print("],\n[")

print("==========================\n")



# t = [0x2122182A1DD6C6CB089442B10FC81BCF71B1860643DAB4B5D553ED9159BA27B1, 0x21560AEA899FBEFAE13418D802FBFC7F966D802A42669F4C49BD4E4B5809B5A5, 0x023B0BEB06E791767ED2A9FEC343593143B3FC86495EA75FF63CF0418A46984E]
# for e in t:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")
#
#
# t = [0x2122182A1DD6C6CB089442B10FC81BCF71B1860643DAB4B5D553ED9159BA27B1, 0x21560AEA899FBEFAE13418D802FBFC7F966D802A42669F4C49BD4E4B5809B5A5, 0x023B0BEB06E791767ED2A9FEC343593143B3FC86495EA75FF63CF0418A46984E, 0x2937E781F5252072620EA018598C4FD5B8241FC1532E1737E567DAF8AF66CE42]
# for e in t:
#     print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
# print("==========================\n")


print("mds")
for e in rescue254.MDS:
    print("[")
    for f in e:
        print(convert_bytes(int.to_bytes(int(f), 32, 'little')))
    print("],")
print("==========================\n")

print("v0")
v0 = rescue254.Sponge([0,0,0,0], 4)
for e in v0:
	print(convert_bytes(int.to_bytes(int(e), 32, 'little')))
